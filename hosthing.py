import os
from telebot import TeleBot, types
from flask import Flask, request
from threading import Lock
import signal
import sys
import time
import atexit
import fcntl
import logging
from dotenv import load_dotenv
import requests
from requests.exceptions import RequestException
import backoff
from database import db, app, User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SQLAlchemy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from werkzeug.middleware.proxy_fix import ProxyFix

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("TOKEN environment variable is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ProxyFix
app.wsgi_app = ProxyFix(app.wsgi_app)

# –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
is_running = True

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
db_lock = Lock()
LOCK_FILE = "/tmp/telegram_bot.lock"

def acquire_lock():
    """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        lock_file = open(LOCK_FILE, 'w')
        fcntl.flock(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return lock_file
    except IOError:
        logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ")
        sys.exit(1)

def release_lock(lock_file):
    """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    if lock_file and not lock_file.closed:
        try:
            fcntl.flock(lock_file, fcntl.LOCK_UN)
            lock_file.close()
            os.remove(LOCK_FILE)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

def cleanup():
    """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global is_running
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞...")
    is_running = False
    try:
        bot.remove_webhook()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    if 'lock_file' in globals():
        release_lock(lock_file)

atexit.register(cleanup)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    cleanup()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

@app.route('/')
def home():
    return "Book Crossing Bot is running!"

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_update = request.get_json()
        bot.process_new_updates([types.Update.de_json(json_update)])
        return "OK", 200
    return "Bad Request", 400

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def set_user_state(user_id, state):
    user_states[user_id] = state

def get_user_state(user_id):
    return user_states.get(user_id)

def clear_user_state(user_id):
    user_states.pop(user_id, None)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "–°—Ç–∞—Ä—Ç", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏",
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏", "Search", "FAQ",
        "–ú–æ–∏ –∫–Ω–∏–≥–∏", "Users", "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"
    ]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    return markup

MENU_COMMANDS = [
    "–°—Ç–∞—Ä—Ç", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏",
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏", "Search", "FAQ",
    "–ú–æ–∏ –∫–Ω–∏–≥–∏", "Users", "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"
]

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    user_id = message.from_user.id
    current_state = get_user_state(user_id)

    if message.text in MENU_COMMANDS:
        handle_menu_command(message)
    elif current_state == "searching":
        search_books(message)
    elif current_state == "adding_books":
        add_books(message)
    elif current_state == "registering":
        register_user(message)
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu())

def handle_menu_command(message):
    command_handlers = {
        "Search": lambda: search_message(message),
        "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏": lambda: add_books_message(message),
        "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è": lambda: register_message(message),
        "–°—Ç–∞—Ä—Ç": lambda: handle_start_button(message),
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏": lambda: available_books(message),
        "FAQ": lambda: faq_message(message),
        "–ú–æ–∏ –∫–Ω–∏–≥–∏": lambda: my_books(message),
        "Users": lambda: users_message(message),
        "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å": lambda: send_survey(message)
    }
    command_handlers.get(message.text, lambda: None)()

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Book Crossing!",
        reply_markup=main_menu()
    )

def handle_start_button(message):
    user_id = message.from_user.id
    with app.app_context():
        user = User.query.filter_by(user_id=user_id).first()
        if user:
            user.started = True
            db.session.commit()
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=main_menu()
        )

def register_message(message):
    set_user_state(message.from_user.id, "registering")
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=main_menu()
    )

def register_user(message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.text
    
    with app.app_context():
        user = User.query.filter_by(user_id=user_id).first()
        if user:
            bot.send_message(
                message.chat.id,
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                reply_markup=main_menu()
            )
        else:
            new_user = User(
                user_id=user_id,
                username=username,
                full_name=full_name,
                books="",
                started=False
            )
            db.session.add(new_user)
            db.session.commit()
            bot.send_message(
                message.chat.id,
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏.",
                reply_markup=main_menu()
            )
    clear_user_state(user_id)

def add_books_message(message):
    set_user_state(message.from_user.id, "adding_books")
    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
        reply_markup=main_menu()
    )

def add_books(message):
    user_id = message.from_user.id
    books = message.text
    
    with app.app_context():
        user = User.query.filter_by(user_id=user_id).first()
        if user:
            if user.books:
                user.books += f", {books}"
            else:
                user.books = books
            db.session.commit()
            bot.send_message(
                message.chat.id,
                "–ö–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
                reply_markup=main_menu()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!",
                reply_markup=main_menu()
            )
    clear_user_state(user_id)

@bot.message_handler(func=lambda message: message.text == "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏")
def available_books(message):
    with app.app_context():
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–∏–≥–∞–º–∏
            users_with_books = User.query.filter(
                User.books.isnot(None),
                User.books != '',
                ~User.books.ilike('None')
            ).all()
            
            if not users_with_books:
                return bot.send_message(message.chat.id, "üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥.")
            
            response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n"
            for user in users_with_books:
                username = f"@{user.username}" if user.username else user.full_name
                response += f"üë§ {username}:\n{user.books}\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥: {str(e)}")
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥.")
            
def search_message(message):
    set_user_state(message.from_user.id, "searching")
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=main_menu()
    )

def search_books(message):
    search_term = message.text.lower()
    with app.app_context():
        users = User.query.filter(User.books.ilike(f'%{search_term}%')).all()
        
        if users:
            results = []
            for user in users:
                if user.username != 'None':
                    results.append(f"@{user.username}: {user.books}")
            
            bot.send_message(
                message.chat.id,
                "–ù–∞–π–¥–µ–Ω—ã –∫–Ω–∏–≥–∏:\n\n" + "\n\n".join(results),
                reply_markup=main_menu()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=main_menu()
            )
    clear_user_state(message.from_user.id)

def faq_message(message):
    bot.send_message(
        message.chat.id,
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin",
        reply_markup=main_menu()
    )

def my_books(message):
    user_id = message.from_user.id
    with app.app_context():
        user = User.query.filter_by(user_id=user_id).first()
        if user and user.books:
            bot.send_message(
                message.chat.id,
                f"–í–∞—à–∏ –∫–Ω–∏–≥–∏:\n{user.books}",
                reply_markup=main_menu()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.",
                reply_markup=main_menu()
            )

@bot.message_handler(func=lambda message: message.text == "Users")
def users_message(message):
    ADMIN_ID = 1213579921  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
    
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

    with app.app_context():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = User.query.order_by(User.id).all()
            
            if not all_users:
                return bot.send_message(message.chat.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            registered = [u for u in all_users if u.full_name and not u.started]
            active = [u for u in all_users if u.started]
            
            response = (
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n\n"
                f"üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ({len(registered)}):\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            for user in registered[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                name = f"@{user.username}" if user.username else user.full_name
                response += f"‚Ä¢ {name}\n"
            
            response += f"\nüöÄ –ù–∞–∂–∞–ª–∏ –°—Ç–∞—Ä—Ç ({len(active)}):\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö
            for user in active[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                name = f"@{user.username}" if user.username else user.full_name
                book_count = len(user.books.split(',')) if user.books else 0
                response += f"‚Ä¢ {name} ({book_count} –∫–Ω–∏–≥)\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

def send_survey(message):
    bot.send_message(
        message.chat.id,
        "–û–ø—Ä–æ—Å: https://forms.gle/example",
        reply_markup=main_menu()
    )

def set_webhook():
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    data = {"url": f"{WEBHOOK_URL}/{TOKEN}"}
    response = requests.post(url, json=data)
    logger.info("Webhook response: %s", response.json())

@backoff.on_exception(
    backoff.expo,
    (RequestException, ConnectionError),
    max_tries=5,
    max_time=300
)
def setup_webhook_with_retry():
    set_webhook()

if __name__ == "__main__":
    lock_file = None
    try:
        lock_file = acquire_lock()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        with app.app_context():
            db.create_all()
        
        setup_webhook_with_retry()
        
        port = int(os.getenv('PORT', 10000))
        if os.getenv('ENVIRONMENT') == 'production':
            from waitress import serve
            serve(app, host="0.0.0.0", port=port)
        else:
            app.run(host='0.0.0.0', port=port, debug=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        cleanup()
        sys.exit(1)