import os
from telebot import TeleBot, types
from flask import Flask, request
from threading import Lock
import signal
import sys
import time
import atexit
import fcntl
import logging
from dotenv import load_dotenv
import requests
from requests.exceptions import RequestException
import backoff
from database import db, app, User
from werkzeug.middleware.proxy_fix import ProxyFix

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
WEBHOOK_URL = os.getenv('WEBHOOK_URL').rstrip('/') if os.getenv('WEBHOOK_URL') else None
TOKEN = os.getenv("TOKEN")
SECRET_TOKEN = os.getenv("SECRET_TOKEN")  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ–±—Ö—É–∫–∞

if not TOKEN:
    raise ValueError("TOKEN environment variable is not set")
if WEBHOOK_URL and not SECRET_TOKEN:
    raise ValueError("SECRET_TOKEN environment variable is required for webhook mode")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ProxyFix
app.wsgi_app = ProxyFix(app.wsgi_app)

# –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
is_running = True

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
db_lock = Lock()
LOCK_FILE = "/tmp/telegram_bot.lock"

def acquire_lock():
    """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        lock_file = open(LOCK_FILE, 'w')
        fcntl.flock(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return lock_file
    except IOError:
        logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ")
        sys.exit(1)

def release_lock(lock_file):
    """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    if lock_file and not lock_file.closed:
        try:
            fcntl.flock(lock_file, fcntl.LOCK_UN)
            lock_file.close()
            os.remove(LOCK_FILE)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

def cleanup():
    """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global is_running
    logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞...")
    is_running = False
    try:
        bot.remove_webhook()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    if 'lock_file' in globals():
        release_lock(lock_file)

atexit.register(cleanup)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    cleanup()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

@app.route('/')
def index():
    return 'Book Crossing Bot is running!'


@app.route('/ping')
def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render"""
    return "pong", 200

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def set_user_state(user_id, state):
    user_states[user_id] = state

def get_user_state(user_id):
    return user_states.get(user_id)

def clear_user_state(user_id):
    user_states.pop(user_id, None)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "–°—Ç–∞—Ä—Ç", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏",
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏", "Search", "FAQ",
        "–ú–æ–∏ –∫–Ω–∏–≥–∏", "Users", "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"
    ]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    return markup

MENU_COMMANDS = [
    "–°—Ç–∞—Ä—Ç", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏",
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏", "Search", "FAQ",
    "–ú–æ–∏ –∫–Ω–∏–≥–∏", "Users", "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å"
]

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    try:
        user_id = message.from_user.id
        current_state = get_user_state(user_id)

        if message.text in MENU_COMMANDS:
            handle_menu_command(message)
        elif current_state == "searching":
            search_books(message)
        elif current_state == "adding_books":
            add_books(message)
        elif current_state == "registering":
            register_user(message)
        else:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_messages: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def handle_menu_command(message):
    command_handlers = {
        "Search": lambda: search_message(message),
        "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏": lambda: add_books_message(message),
        "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è": lambda: register_message(message),
        "–°—Ç–∞—Ä—Ç": lambda: handle_start_button(message),
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏": lambda: available_books(message),
        "FAQ": lambda: faq_message(message),
        "–ú–æ–∏ –∫–Ω–∏–≥–∏": lambda: my_books(message),
        "Users": lambda: users_message(message),
        "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å": lambda: send_survey(message)
    }
    handler = command_handlers.get(message.text, lambda: None)
    try:
        handler()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {message.text}: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['start'])
def start(message):
    try:
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Book Crossing!",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

def handle_start_button(message):
    try:
        user_id = message.from_user.id
        with app.app_context():
            user = User.query.filter_by(user_id=user_id).first()
            if user:
                user.started = True
                db.session.commit()
            bot.send_message(
                message.chat.id,
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                reply_markup=main_menu()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start_button: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")

def register_message(message):
    try:
        set_user_state(message.from_user.id, "registering")
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ register_message: {e}")

def register_user(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        full_name = message.text
        
        with app.app_context():
            user = User.query.filter_by(user_id=user_id).first()
            if user:
                bot.send_message(
                    message.chat.id,
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                    reply_markup=main_menu()
                )
            else:
                new_user = User(
                    user_id=user_id,
                    username=username,
                    full_name=full_name,
                    books="",
                    started=False
                )
                db.session.add(new_user)
                db.session.commit()
                bot.send_message(
                    message.chat.id,
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏.",
                    reply_markup=main_menu()
                )
        clear_user_state(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ register_user: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

def add_books_message(message):
    try:
        set_user_state(message.from_user.id, "adding_books")
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_books_message: {e}")

def add_books(message):
    try:
        user_id = message.from_user.id
        books = message.text
        
        with app.app_context():
            user = User.query.filter_by(user_id=user_id).first()
            if user:
                if user.books:
                    user.books += f", {books}"
                else:
                    user.books = books
                db.session.commit()
                bot.send_message(
                    message.chat.id,
                    "–ö–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
                    reply_markup=main_menu()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!",
                    reply_markup=main_menu()
                )
        clear_user_state(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_books: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥.")

@bot.message_handler(func=lambda message: message.text == "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏")
def available_books(message):
    try:
        with app.app_context():
            users_with_books = User.query.filter(
                User.books.isnot(None),
                User.books != '',
                ~User.books.ilike('None')
            ).all()
            
            if not users_with_books:
                return bot.send_message(message.chat.id, "üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥.")
            
            response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n"
            for user in users_with_books:
                username = f"@{user.username}" if user.username else user.full_name
                response += f"üë§ {username}:\n{user.books}\n\n"
            
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ available_books: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥.")
            
def search_message(message):
    try:
        set_user_state(message.from_user.id, "searching")
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_message: {e}")

def search_books(message):
    try:
        search_term = message.text.lower()
        with app.app_context():
            users = User.query.filter(User.books.ilike(f'%{search_term}%')).all()
            
            if users:
                results = []
                for user in users:
                    if user.username != 'None':
                        results.append(f"@{user.username}: {user.books}")
                
                bot.send_message(
                    message.chat.id,
                    "–ù–∞–π–¥–µ–Ω—ã –∫–Ω–∏–≥–∏:\n\n" + "\n\n".join(results),
                    reply_markup=main_menu()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=main_menu()
                )
        clear_user_state(message.from_user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_books: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")

def faq_message(message):
    try:
        bot.send_message(
            message.chat.id,
            "–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. Telegram: @microkosmoos",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ faq_message: {e}")

def my_books(message):
    try:
        user_id = message.from_user.id
        with app.app_context():
            user = User.query.filter_by(user_id=user_id).first()
            if user and user.books:
                bot.send_message(
                    message.chat.id,
                    f"–í–∞—à–∏ –∫–Ω–∏–≥–∏:\n{user.books}",
                    reply_markup=main_menu()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.",
                    reply_markup=main_menu()
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_books: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∫–Ω–∏–≥.")

@bot.message_handler(func=lambda message: message.text == "Users")
def users_message(message):
    try:
        ADMIN_ID = 1213579921
        
        if message.from_user.id != ADMIN_ID:
            return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

        with app.app_context():
            all_users = User.query.order_by(User.id).all()
            
            if not all_users:
                return bot.send_message(message.chat.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            
            registered = [u for u in all_users if u.full_name and not u.started]
            active = [u for u in all_users if u.started]
            
            response = (
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n\n"
                f"üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ({len(registered)}):\n"
            )
            
            for user in registered[:10]:
                name = f"@{user.username}" if user.username else user.full_name
                response += f"‚Ä¢ {name}\n"
            
            response += f"\nüöÄ –ù–∞–∂–∞–ª–∏ –°—Ç–∞—Ä—Ç ({len(active)}):\n"
            
            for user in active[:10]:
                name = f"@{user.username}" if user.username else user.full_name
                book_count = len(user.books.split(',')) if user.books else 0
                response += f"‚Ä¢ {name} ({book_count} –∫–Ω–∏–≥)\n"
            
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ users_message: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

def send_survey(message):
    try:
        bot.send_message(
            message.chat.id,
            "–û–ø—Ä–æ—Å: https://forms.gle/example",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_survey: {e}")

def setup_webhook():
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
        bot.remove_webhook()
        time.sleep(1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–µ–±—Ö—É–∫–∞
        webhook_url = f"{WEBHOOK_URL}/webhook/bot_webhook"
        
        logger.info(f"Setting webhook to: {webhook_url}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        result = bot.set_webhook(
            url=webhook_url,
            max_connections=40,
            allowed_updates=["message", "callback_query"],
            drop_pending_updates=True,
            secret_token=SECRET_TOKEN
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        webhook_info = bot.get_webhook_info()
        if webhook_info.url != webhook_url:
            logger.error(f"Webhook URL mismatch! Set: {webhook_url}, Actual: {webhook_info.url}")
            return False
            
        return True
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False

@backoff.on_exception(
    backoff.expo,
    (RequestException, ConnectionError),
    max_tries=5,
    max_time=300
)
def setup_webhook_with_retry():
    return setup_webhook()

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 10000))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    with app.app_context():
        db.create_all()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ Thread)
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    def run_polling():
        logger.info("Polling mode activated")
        while True:
            try:
                bot.polling(none_stop=True, timeout=30)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
                time.sleep(10)

    # –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ
    run_polling()  # –£–±–µ—Ä–∏—Ç–µ Flask, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω